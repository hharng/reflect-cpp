// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PERSON_H_
#define FLATBUFFERS_GENERATED_PERSON_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct TestPersonComparisonPerson;
struct TestPersonComparisonPersonBuilder;

struct TestPersonComparisonPerson FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TestPersonComparisonPersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIRST_NAME = 4,
    VT_LAST_NAME = 6,
    VT_AGE = 8,
    VT_CHILDREN = 10
  };
  const ::flatbuffers::String *first_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRST_NAME);
  }
  const ::flatbuffers::String *last_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAST_NAME);
  }
  uint32_t age() const {
    return GetField<uint32_t>(VT_AGE, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<TestPersonComparisonPerson>> *children() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<TestPersonComparisonPerson>> *>(VT_CHILDREN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FIRST_NAME) &&
           verifier.VerifyString(first_name()) &&
           VerifyOffset(verifier, VT_LAST_NAME) &&
           verifier.VerifyString(last_name()) &&
           VerifyField<uint32_t>(verifier, VT_AGE, 4) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           verifier.EndTable();
  }
};

struct TestPersonComparisonPersonBuilder {
  typedef TestPersonComparisonPerson Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_first_name(::flatbuffers::Offset<::flatbuffers::String> first_name) {
    fbb_.AddOffset(TestPersonComparisonPerson::VT_FIRST_NAME, first_name);
  }
  void add_last_name(::flatbuffers::Offset<::flatbuffers::String> last_name) {
    fbb_.AddOffset(TestPersonComparisonPerson::VT_LAST_NAME, last_name);
  }
  void add_age(uint32_t age) {
    fbb_.AddElement<uint32_t>(TestPersonComparisonPerson::VT_AGE, age, 0);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TestPersonComparisonPerson>>> children) {
    fbb_.AddOffset(TestPersonComparisonPerson::VT_CHILDREN, children);
  }
  explicit TestPersonComparisonPersonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TestPersonComparisonPerson> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TestPersonComparisonPerson>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TestPersonComparisonPerson> CreateTestPersonComparisonPerson(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> first_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> last_name = 0,
    uint32_t age = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TestPersonComparisonPerson>>> children = 0) {
  TestPersonComparisonPersonBuilder builder_(_fbb);
  builder_.add_children(children);
  builder_.add_age(age);
  builder_.add_last_name(last_name);
  builder_.add_first_name(first_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TestPersonComparisonPerson> CreateTestPersonComparisonPersonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *first_name = nullptr,
    const char *last_name = nullptr,
    uint32_t age = 0,
    const std::vector<::flatbuffers::Offset<TestPersonComparisonPerson>> *children = nullptr) {
  auto first_name__ = first_name ? _fbb.CreateString(first_name) : 0;
  auto last_name__ = last_name ? _fbb.CreateString(last_name) : 0;
  auto children__ = children ? _fbb.CreateVector<::flatbuffers::Offset<TestPersonComparisonPerson>>(*children) : 0;
  return CreateTestPersonComparisonPerson(
      _fbb,
      first_name__,
      last_name__,
      age,
      children__);
}

inline const TestPersonComparisonPerson *GetTestPersonComparisonPerson(const void *buf) {
  return ::flatbuffers::GetRoot<TestPersonComparisonPerson>(buf);
}

inline const TestPersonComparisonPerson *GetSizePrefixedTestPersonComparisonPerson(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TestPersonComparisonPerson>(buf);
}

inline bool VerifyTestPersonComparisonPersonBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TestPersonComparisonPerson>(nullptr);
}

inline bool VerifySizePrefixedTestPersonComparisonPersonBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TestPersonComparisonPerson>(nullptr);
}

inline void FinishTestPersonComparisonPersonBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestPersonComparisonPerson> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTestPersonComparisonPersonBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestPersonComparisonPerson> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_PERSON_H_
